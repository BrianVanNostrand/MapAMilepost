<UserControl x:Class="MapAMilepost.Views.MapLineView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:controls="clr-namespace:ArcGIS.Desktop.Framework.Controls;assembly=ArcGIS.Desktop.Framework"
             xmlns:viewmodels="clr-namespace:MapAMilepost.ViewModels" 
             mc:Ignorable="d" 
             xmlns:valueConverters="clr-namespace:MapAMilepost.ValueConverters"
             xmlns:theme ="../Themes/ButtonTheme.xaml"
             xmlns:b ="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             d:DesignWidth="364"
            Margin="10 0 10 0">
    <UserControl.Resources>
        <ResourceDictionary>
            <valueConverters:BorderConverter x:Key="BorderConverter"/>
            <valueConverters:BooleanInverter x:Key="BooleanInverter"/>
            <valueConverters:DirectionConverter x:Key="DirectionConverter"/>
            <valueConverters:NumberConverter x:Key="NumberConverter"/>
            <valueConverters:BrushConverter x:Key="BrushConverter"/>
            <valueConverters:ElementHeightConverter x:Key="ElementHeightConverter"/>
            <valueConverters:ComboBoxDirectionConverter x:Key="ComboBoxDirectionConverter"/>
            <valueConverters:ComboBoxCountConverter x:Key="ComboBoxCountConverter"/>
            <valueConverters:InteractionButtonLabelConverter x:Key="InteractionButtonLabelConverter"/>
            <valueConverters:InputModeButtonLabelConverter x:Key="InputModeButtonLabelConverter"/>
            <valueConverters:VisibilityConverter x:Key="VisibilityConverter"/>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Themes/ButtonTheme.xaml" />
                <ResourceDictionary Source="../Themes/DataGridRowTheme.xaml" />
                <ResourceDictionary Source="../Themes/SelectableTextStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid x:Name="MainGrid" Background="White" >
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition x:Name="SearchDistanceRow" Height="*"/>
            <RowDefinition x:Name="SOEResultsGridRow"/>
            <RowDefinition x:Name="MapToolControlsGridRow"/>
            <RowDefinition x:Name="DataGridRow"/>
            <RowDefinition x:Name="ResultsTableControlsRow"/>
        </Grid.RowDefinitions>
        <Grid  Grid.Row="0" x:Name="SearchDistance" Margin="0 0 0 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="125px"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="20px"/>
                <RowDefinition Height="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter}}"/>
                <RowDefinition Height="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter}}"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" Grid.Column="0" x:Name="ToggleGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <TextBox Grid.Column="0" Grid.Row="0" Style="{StaticResource SelectableTextBox}" HorizontalContentAlignment="Center">Mode</TextBox>
                <Button Grid.Column="1" Grid.Row="0" FontSize="7pt" HorizontalContentAlignment="Center"  Height="20" VerticalAlignment="Top" Content="{Binding IsMapMode, Converter={StaticResource InputModeButtonLabelConverter}}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDown">
                            <i:InvokeCommandAction Command="{Binding ChangeModeCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </Grid>
            <!--<TextBox x:Name="MapPointSearchDistanceStartLabel" Grid.Row="1" Grid.Column="0" Style="{StaticResource SelectableTextBox}">Search Distance (Start)</TextBox>-->
            <!--<TextBox x:Name="MapStartPointSearcDistanceTextBox"  Grid.Row="1" Grid.Column="1" Text="{Binding LineArgs.StartArgs.SearchRadius, Mode=TwoWay}" ToolTip="Set the search distance to find the route location nearest the mapped start point."/>-->
            <!--<TextBox x:Name="FeetStartLabel" Grid.Row="1" Grid.Column="2" Style="{StaticResource SelectableTextBox}">Feet</TextBox>-->
            <!--<TextBox x:Name="MapPointSearchDistanceEndLabel" Grid.Row="2" Grid.Column="0" Style="{StaticResource SelectableTextBox}">Search Distance (End)</TextBox>-->
            <!--<TextBox x:Name="MapEndPointSearcDistanceTextBox"  Grid.Row="2" Grid.Column="1" Text="{Binding LineArgs.EndArgs.SearchRadius, Mode=TwoWay}" ToolTip="Set the search distance to find the route location nearest the mapped end point."/>-->
            <!--<TextBox x:Name="FeetEndLabel" Grid.Row="2" Grid.Column="2" Style="{StaticResource SelectableTextBox}">Feet</TextBox>-->
        </Grid>
        <Grid Grid.Row="1" x:Name="SOEResultsGrid" Margin="0 0 0 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20px"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition/><!-->Header<-->
                <RowDefinition/><!-->Route<-->
                <RowDefinition Height="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter},ConverterParameter='true'}"/>
                <!--RRT/RRQ-->
                <RowDefinition/><!-->SRMP<-->
                <RowDefinition/><!-->ARM<-->
                <RowDefinition Height="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter}}"/><!-->X<-->
                <RowDefinition Height="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter}}"/><!-->Y<-->
                <RowDefinition/><!-->Direction<-->
                <RowDefinition Height="{Binding SRMPIsSelected, Converter={StaticResource ElementHeightConverter}}"/><!-->Back<-->
                <RowDefinition/><!-->Realignment<-->
                <RowDefinition/><!--Reference-->
                <RowDefinition/><!-->Response<-->
            </Grid.RowDefinitions>
            <!--Header-->
            <TextBox Background="#cfd8ff" Grid.Column="0" Grid.Row="0" HorizontalContentAlignment="Center" Grid.ColumnSpan="2" Style="{StaticResource SelectableTextBox}" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"></TextBox>
            <TextBox Background="#cfd8ff" Grid.Column="2" Grid.Row="0" HorizontalContentAlignment="Center" Style="{StaticResource SelectableTextBox}">Start</TextBox>
            <TextBox Background="#cfd8ff" Grid.Column="3" Grid.Row="0" HorizontalContentAlignment="Center" Style="{StaticResource SelectableTextBox}">End</TextBox>
            <!--MP Type Radio Buttons-->
            <RadioButton Grid.Column="0" Grid.Row="3" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Command="{Binding ChangeMPTypeCommand}" GroupName="milepostType" CommandParameter="SRMP"  IsChecked="{Binding SRMPIsSelected}" ToolTip="Use SRMP milepost type."/>
            <RadioButton Grid.Column="0" Grid.Row="4" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Command="{Binding ChangeMPTypeCommand}" GroupName="milepostType" CommandParameter="ARM" IsChecked="{Binding SRMPIsSelected, Converter={StaticResource BooleanInverter}}" ToolTip="Use ARM milepost type."/>
            <!--Labels-->
            <TextBox Grid.Column="1" Grid.Row="1" HorizontalContentAlignment="Center" ToolTip="The route that the location belongs to." Style="{StaticResource SelectableTextBox}">Route</TextBox>
            <TextBox Grid.Column="1" Grid.Row="2" HorizontalContentAlignment="Center" ToolTip="Related Route Type"  Style="{StaticResource SelectableTextBox}">RRT/RRQ</TextBox>
            <TextBox Grid.Column="1" Grid.Row="3" HorizontalContentAlignment="Center" ToolTip="SRMP measure of the route location found." Style="{StaticResource SelectableTextBox}">SRMP</TextBox>
            <TextBox Grid.Column="1" Grid.Row="4" HorizontalContentAlignment="Center" ToolTip="ARM measure of the route location found." Style="{StaticResource SelectableTextBox}">ARM</TextBox>
            <TextBox Grid.Column="1" Grid.Row="5" HorizontalContentAlignment="Center" ToolTip="X-coordinate of the route location found." Style="{StaticResource SelectableTextBox}">X</TextBox>
            <TextBox Grid.Column="1" Grid.Row="6" HorizontalContentAlignment="Center" ToolTip="Y-coordinate of the route location found." Style="{StaticResource SelectableTextBox}">Y</TextBox>
            <TextBox Grid.Column="1" Grid.Row="7" HorizontalContentAlignment="Center" ToolTip="Whether or not the route location is in the decreasing direction of the roadway (Southbound or Westbound)." Style="{StaticResource SelectableTextBox}">Direction</TextBox>
            <TextBox Grid.Column="1" Grid.Row="8" HorizontalContentAlignment="Center" ToolTip="Whether or not the route location represent back mileage." Style="{StaticResource SelectableTextBox}">Back</TextBox>
            <TextBox Grid.Column="1" Grid.Row="9" HorizontalContentAlignment="Center" ToolTip="Realignment date of the route location." Style="{StaticResource SelectableTextBox}">Realignment Date</TextBox>
            <TextBox Grid.Column="1" Grid.Row="10" HorizontalContentAlignment="Center" ToolTip="Reference date of the route location." Style="{StaticResource SelectableTextBox}">Reference Date</TextBox>
            <TextBox Grid.Column="1" Grid.Row="11" HorizontalContentAlignment="Center" ToolTip="Response date of the route location found." Style="{StaticResource SelectableTextBox}">Response Date</TextBox>
            <!--Start Point Bindings-->
            <ComboBox Grid.Column="2" Grid.Row="1" Grid.ColumnSpan="2" x:Name="RouteIDCombo" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" HorizontalContentAlignment="Center" ItemsSource="{Binding RouteIDInfos}" DisplayMemberPath="Title" SelectedIndex="{Binding RouteComboIndex, Mode=TwoWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding RouteChangedCommand}" CommandParameter="{Binding ElementName=RouteIDCombo}"/>
                        <i:InvokeCommandAction Command="{Binding RouteQualifierChangedCommand}" CommandParameter="{Binding ElementName=RouteQualCombo}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>
            <TextBox Grid.Column="2" Grid.Row="1" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" HorizontalContentAlignment="Center" Grid.ColumnSpan="2" Text="{Binding LineResponse.StartResponse.Route, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SelectableTextBox}" IsReadOnly="{Binding IsMapMode}" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}"/>
            <!-- The RRT/RRQ context-dependent text box and combo box -->
            <ComboBox Grid.Column="2" Grid.Row="2" Grid.ColumnSpan="2" x:Name="RouteQualCombo" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" HorizontalContentAlignment="Center" ItemsSource="{Binding RouteQualifiers}" SelectedIndex="0" IsEnabled="{Binding RouteQualifiers,Converter={StaticResource ComboBoxCountConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding RouteQualifierChangedCommand}" CommandParameter="{Binding ElementName=RouteQualCombo}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>
            <!-- The SRMP and ARM context-dependent text boxes -->
            <TextBox Grid.Column="2" Grid.Row="3" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Text="{Binding LineResponse.StartResponse.Srmp, UpdateSourceTrigger=LostFocus, Mode=TwoWay}" IsEnabled="{Binding SRMPIsSelected}" Style="{StaticResource SelectableTextBox}" IsReadOnly="{Binding IsMapMode}" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="KeyDown">
                        <i:InvokeCommandAction Command="{Binding MPChangedCommand}" CommandParameter="start"  />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Grid.Column="2" Grid.Row="3" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.StartResponse.Srmp, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Delay=300}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="2" Grid.Row="4" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Text="{Binding LineResponse.StartResponse.Arm, UpdateSourceTrigger=LostFocus, Mode=TwoWay}" IsEnabled="{Binding SRMPIsSelected, Converter={StaticResource BooleanInverter}}" Style="{StaticResource SelectableTextBox}" IsReadOnly="{Binding IsMapMode}" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="KeyDown">
                        <i:InvokeCommandAction Command="{Binding MPChangedCommand}" CommandParameter="start"  />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Grid.Column="2" Grid.Row="4" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.StartResponse.Arm, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource SelectableTextBox}"/>
            <!---->
            <TextBox Grid.Column="2" Grid.Row="5" HorizontalContentAlignment="Center" Text="{Binding LineResponse.StartResponse.RouteGeometry.x, Converter={StaticResource NumberConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="2" Grid.Row="6" HorizontalContentAlignment="Center" Text="{Binding LineResponse.StartResponse.RouteGeometry.y, Converter={StaticResource NumberConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SelectableTextBox}"/>
            <ComboBox 
                HorizontalContentAlignment="Center"
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}"
                Grid.Column="2" Grid.Row="7" Grid.ColumnSpan="2"
                IsEditable ="False" 
                BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}"
                ItemsSource="{Binding Directions}"
                SelectedValue="{Binding LineResponse.StartResponse.Decrease, Converter={StaticResource ComboBoxDirectionConverter}, Mode=TwoWay}"
            >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding DirectionChangedCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>
            <TextBox Grid.Column="2" Grid.Row="7" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.StartResponse.Decrease, ConverterParameter='PreviewPane', Converter={StaticResource DirectionConverter}}" Style="{StaticResource SelectableTextBox}"/>
            <ComboBox 
                HorizontalContentAlignment="Center"
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}"
                Grid.Column="2" Grid.Row="8" 
                IsEditable ="False" 
                BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}"
                ItemsSource="{Binding AheadBack}"
                SelectedValue="{Binding LineResponse.StartResponse.Back, Mode=TwoWay}"
            />
            <TextBox Grid.Column="2" Grid.Row="8" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.StartResponse.Back, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="2" Grid.Row="9" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.StartResponse.RealignmentDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="2" Grid.Row="10" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.StartResponse.ReferenceDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="2" Grid.Row="11" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.StartResponse.ResponseDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="3" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Text="{Binding LineResponse.EndResponse.Srmp, UpdateSourceTrigger=LostFocus, Mode=TwoWay}" IsEnabled="{Binding SRMPIsSelected}" Style="{StaticResource SelectableTextBox}" IsReadOnly="{Binding IsMapMode}" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <i:InvokeCommandAction Command="{Binding MPChangedCommand}" CommandParameter="end"  />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Grid.Column="3" Grid.Row="3" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.EndResponse.Srmp, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="4" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}" Text="{Binding LineResponse.EndResponse.Arm, UpdateSourceTrigger=LostFocus, Mode=TwoWay}" IsEnabled="{Binding SRMPIsSelected, Converter={StaticResource BooleanInverter}}" Style="{StaticResource SelectableTextBox}" IsReadOnly="{Binding IsMapMode}" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <i:InvokeCommandAction Command="{Binding MPChangedCommand}" CommandParameter="end"  />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Grid.Column="3" Grid.Row="4" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.EndResponse.Arm, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="5" HorizontalContentAlignment="Center" Text="{Binding LineResponse.EndResponse.RouteGeometry.x, Converter={StaticResource NumberConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="6" HorizontalContentAlignment="Center" Text="{Binding LineResponse.EndResponse.RouteGeometry.y, Converter={StaticResource NumberConverter}, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="7" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.EndResponse.Decrease, ConverterParameter='PreviewPane', Converter={StaticResource DirectionConverter}}" Style="{StaticResource SelectableTextBox}"/>
            <ComboBox 
                HorizontalContentAlignment="Center"
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}"
                Grid.Column="3" Grid.Row="8" 
                IsEditable ="False" 
                BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}"
                ItemsSource="{Binding AheadBack}"
                SelectedValue="{Binding LineResponse.EndResponse.Back, Mode=TwoWay}"
            />
            <TextBox Grid.Column="3" Grid.Row="8" HorizontalContentAlignment="Center" Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Text="{Binding LineResponse.EndResponse.Back, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="9" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.EndResponse.RealignmentDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="10" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.EndResponse.ReferenceDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>
            <TextBox Grid.Column="3" Grid.Row="11" HorizontalContentAlignment="Center" BorderThickness="{Binding IsMapMode, Converter={StaticResource BorderConverter}}" Text="{Binding LineResponse.EndResponse.ResponseDate, UpdateSourceTrigger=PropertyChanged}" Focusable="false" Style="{StaticResource SelectableTextBox}"/>

            <Border Grid.ColumnSpan="4" Grid.Row="2" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="3" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="4" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="5" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="6" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="7" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="8" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="9" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="10" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            <Border Grid.ColumnSpan="4" Grid.Row="11" BorderBrush="#b3c1fc" BorderThickness="0,1,0,0" Background="{x:Null}"  Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"/>
            
            <Border Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Grid.Row="1" Grid.Column="2" BorderBrush="#b3c1fc" BorderThickness="1,0,0,0" Background="{x:Null}" />
            <Border Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}" Grid.RowSpan="10" Grid.Row="2" Grid.Column="2" BorderBrush="#b3c1fc" BorderThickness="1,0,1,0" Background="{x:Null}" />
        </Grid>
        <Grid Grid.Row="2" x:Name="MapToolControlsGrid">
            <Grid.Resources>
                <ResourceDictionary Source="../Themes/ButtonTheme.xaml" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="{Binding IsMapMode, Converter={StaticResource ElementHeightConverter}}"/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button
                x:Name="MapStartPointExecuteButtonMap" 
                Style="{StaticResource whiteButton}"
                Grid.Row="3" Grid.Column="0" 
                CommandParameter="start" 
                Command="{Binding InteractionCommand}" 
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"
                Content="{Binding SessionActive, Converter={StaticResource InteractionButtonLabelConverter}, ConverterParameter='Start'}"
                ToolTip="Start mapping session for start point."
            />
            <Button
                x:Name="MapLineExecuteButtonForm" 
                Style="{StaticResource whiteButton}"
                Grid.Row="3" Grid.Column="0" 
                CommandParameter="form" 
                Command="{Binding InteractionCommand}" 
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}, ConverterParameter='true'}"
                Content="Get Line"
                ToolTip="Generate a line using provided start and end mileposts."
            />
            <Button 
                x:Name="MapEndPointExecuteButtonMap" 
                Style="{StaticResource whiteButton}"
                Grid.Row="3" Grid.Column="1" 
                CommandParameter="end"  
                Command="{Binding InteractionCommand}" 
                Visibility="{Binding IsMapMode, Converter={StaticResource VisibilityConverter}}"
                Content="{Binding SessionEndActive, Converter={StaticResource InteractionButtonLabelConverter}, ConverterParameter='End'}"
                ToolTip="Start mapping session for end point."
            />
            <Button x:Name="ClearResultsButton" Grid.Row="3" Grid.Column="2" CommandParameter="{Binding ElementName=LinesGrid}" Command="{Binding UpdateSelectionCommand}" Style="{StaticResource whiteButton}" ToolTip="Clear feature selection.">Clear</Button>
            <Button x:Name="SaveResultsButton" Grid.Row="3" Grid.Column="3" CommandParameter="{Binding ElementName=LinesGrid}" Command="{Binding SaveLineResultCommand}" ToolTip="Save line to the results grid.">
                <Button.Style>
                    <Style BasedOn="{StaticResource whiteButton}" TargetType="{x:Type Button}">
                        <Setter Property="Content" Value="Save Result" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsSaved}" Value="True">
                                <Setter Property="Content" Value="Saved" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=IsSaved}" Value="False">
                                <Setter Property="Content" Value="Save Result" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
        <Grid Grid.Row="3" x:Name="DataGrid" MinHeight="200px" Visibility="{Binding ShowResultsTable, Converter={StaticResource VisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="30px"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="70px"/>
                    <ColumnDefinition Width="40px"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBox Grid.Row="0" Grid.Column="0" Style="{StaticResource SelectableTextBox}" VerticalAlignment="Top">Saved Lines:</TextBox>
                <Label Grid.Row="0" Grid.Column="1" Content="{Binding LineResponses.Count}"/>
            </Grid>
            <ScrollViewer  Grid.ColumnSpan="3" Grid.Row="3">
                <DataGrid CanUserAddRows="False" CanUserDeleteRows="False" x:Name="LinesGrid" HorizontalAlignment="Stretch" AutoGenerateColumns="False" VerticalAlignment="Stretch" ItemsSource="{Binding LineResponses}" CellStyle="{DynamicResource DataGridCellStyle}">
                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#cfd8ff" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.RowStyle>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Route" Binding="{Binding StartResponse.Route, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start ARM" Binding="{Binding StartResponse.Arm, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End ARM" Binding="{Binding EndResponse.Arm, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start SRMP" Binding="{Binding StartResponse.Srmp, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End SRMP" Binding="{Binding EndResponse.Srmp, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Direction" Binding="{Binding StartResponse.Decrease,Mode=OneWay, Converter={StaticResource DirectionConverter}}"/>
                        <DataGridTextColumn Header="Start Back" Binding="{Binding StartResponse.Back, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End Back" Binding="{Binding EndResponse.Back, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start Realignment Date" Binding="{Binding StartResponse.RealignmentDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End Realignment Date" Binding="{Binding EndResponse.RealignmentDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start Reference Date" Binding="{Binding StartResponse.ReferenceDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End Reference Date" Binding="{Binding EndResponse.ReferenceDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start Response Date" Binding="{Binding StartResponse.ResponseDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End Response Date" Binding="{Binding EndResponse.ResponseDate, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start X" Binding="{Binding StartResponse.RouteGeometry.x, Converter={StaticResource NumberConverter}, Mode=OneWay}"/>
                        <DataGridTextColumn Header="Start Y" Binding="{Binding StartResponse.RouteGeometry.y, Converter={StaticResource NumberConverter},  Mode=OneWay}"/>
                        <DataGridTextColumn Header="End X" Binding="{Binding EndResponse.RouteGeometry.x, Mode=OneWay}"/>
                        <DataGridTextColumn Header="End Y" Binding="{Binding EndResponse.RouteGeometry.y, Mode=OneWay}"/>
                    </DataGrid.Columns>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="MouseLeftButtonUp">
                            <b:InvokeCommandAction CommandParameter="{Binding ElementName=LinesGrid}" Command="{Binding UpdateSelectionCommand}"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MouseDoubleClick">
                            <b:InvokeCommandAction CommandParameter="{Binding ElementName=LinesGrid}" Command="{Binding ZoomToRecordCommand}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </DataGrid>
            </ScrollViewer>
        </Grid>
        <Grid Grid.Row="4" x:Name="ResultsTableControls">
            <Grid.RowDefinitions>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.Resources>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ShowResultsTable}" Value="true">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ShowResultsTable}" Value="false">
                            <Setter Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>
            <Button Visibility="Hidden" Grid.Row="2" Grid.Column="0" Command="{Binding ExportFeatures}" Style="{StaticResource whiteButton}" IsEnabled="True" >
                Export Data
            </Button>
            <Button x:Name="DeleteItemsButton" Grid.Row="2" Grid.Column="2" Command="{Binding DeleteItemsCommand}" Style="{StaticResource whiteButton}" ToolTip="Delete selected saved lines from the layer.">
                Delete Record(s)
            </Button>
        </Grid>
    </Grid>
</UserControl>